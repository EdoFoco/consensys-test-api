AWSTemplateFormatVersion: '2010-09-09'
Description: consensys public and private subnets. Supports
             public facing load balancers, private internal load balancers, and
             both internal and external service discovery namespaces.
Parameters:
  EnvironmentName:
    Type: String
    Default: staging
    Description: "Environment name (e.g. staging, production)"
  BaseEnvironmentName:
    Type: String
    Default: base
    Description: Base environment name (e.g. base, staging, production)"
  CIDR:
    Type: String
    Default: 10.1.0.0/16
    Description: VPC wide CIDR block
  PublicSubnetOneCIDR:
    Type: String
    Default: 10.1.1.0/24
    Description: Public subnet one wide CIDR block
  PublicSubnetTwoCIDR:
    Type: String
    Default: 10.1.2.0/24
    Description: Public subnet two wide CIDR block
  PrivateSubnetOneCIDR:
    Type: String
    Default: 10.1.3.0/24
    Description: Private subnet one wide CIDR block
  PrivateSubnetTwoCIDR:
    Type: String
    Default: 10.1.4.0/24
    Description: Private subnet two wide CIDR block
  BasePrivateSubnetOneCIDR:
    Type: String
    Default: 10.0.3.0/24
    Description: Private subnet two wide CIDR block
  BasePrivateSubnetTwoCIDR:
    Type: String
    Default: 10.0.4.0/24
    Description: Private subnet two wide CIDR block
Resources:
  # VPC in which containers will be networked.
  # It has two public subnets, and two private subnets.
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref CIDR
      Tags: 
        - Key: 'Name'
          Value: !Sub vpc-${EnvironmentName}
      
  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref PublicSubnetOneCIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: 'Name'
          Value: !Sub public-subnet-1-${EnvironmentName}

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref PublicSubnetTwoCIDR
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: 'Name'
          Value: !Sub public-subnet-2-${EnvironmentName}

  # Two private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref PrivateSubnetOneCIDR
      Tags: 
        - Key: 'Name'
          Value: !Sub private-subnet-1-${EnvironmentName}

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref PrivateSubnetTwoCIDR
      Tags: 
        - Key: 'Name'
          Value: !Sub private-subnet-2-${EnvironmentName}

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
   
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
      
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags: 
        - Key: 'Name'
          Value: !Sub public-route-table-${EnvironmentName}

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
     
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
     

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
      
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
      
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
      Tags: 
        - Key: 'Name'
          Value: !Sub nat-gateway-1-${EnvironmentName}

  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags: 
        - Key: 'Name'
          Value: !Sub nat-gateway-2-${EnvironmentName}

  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags: 
        - Key: 'Name'
          Value: !Sub private-route-table-1-${EnvironmentName}

  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
     
  VPCToVPCPeerPrivateSubnetOneRouteRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: !Ref BasePrivateSubnetOneCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  
  VPCToVPCPeerPrivateSubnetTwoRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: !Ref BasePrivateSubnetTwoCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
         
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags: 
        - Key: 'Name'
          Value: !Sub private-route-table-2-${EnvironmentName}

  PrivateNatRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  
  VPCToVPCPeerPrivateSubnetOneRouteRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: !Ref BasePrivateSubnetOneCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  
  VPCToVPCPeerPrivateSubnetTwoRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: !Ref BasePrivateSubnetTwoCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: 'Subnet group for private databases'
      DBSubnetGroupName: !Sub private-db-subnet-group-${EnvironmentName}
      SubnetIds: 
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      Tags: 
        - Key: 'Name'
          Value: !Sub private-db-subnet-group-${EnvironmentName}

  VPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: 
        Fn::ImportValue: !Sub ${BaseEnvironmentName}:VpcId
      PeerVpcId: !Ref VPC

  VPCPeerToVPCPrivateSubnetOneRouteRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Fn::ImportValue: !Sub ${BaseEnvironmentName}:PrivateRouteTableOne
      DestinationCidrBlock: !Ref PrivateSubnetOneCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  
  VPCPeerToVPCPrivateSubnetTwoRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Fn::ImportValue: !Sub ${BaseEnvironmentName}:PrivateRouteTableOne
      DestinationCidrBlock: !Ref PrivateSubnetTwoCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  VPCPeerToVPCPrivateSubnetOneRouteRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Fn::ImportValue: !Sub ${BaseEnvironmentName}:PrivateRouteTableTwo
      DestinationCidrBlock: !Ref PrivateSubnetOneCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  
  VPCPeerToVPCPrivateSubnetTwoRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Fn::ImportValue: !Sub ${BaseEnvironmentName}:PrivateRouteTableTwo
      DestinationCidrBlock: !Ref PrivateSubnetTwoCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  
  VPCPeerToVPCPrivateSubnetOneRouteRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Fn::ImportValue: !Sub ${BaseEnvironmentName}:PrivateRouteTableTwo
      DestinationCidrBlock: !Ref PrivateSubnetOneCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  
  VPCPeerToVPCPublicSubnetToPrivateSubnetOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Fn::ImportValue: !Sub ${BaseEnvironmentName}:PublicRouteTable
      DestinationCidrBlock: !Ref PrivateSubnetOneCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  
  VPCPeerToVPCPublicSubnetToPrivateSubnetTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: 
        Fn::ImportValue: !Sub ${BaseEnvironmentName}:PublicRouteTable
      DestinationCidrBlock: !Ref PrivateSubnetTwoCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  
  LocalNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Vpc: !Ref 'VPC'
      Name: !Sub '${EnvironmentName}.internal-consensys.com'

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Sub ${EnvironmentName}:VpcId
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Sub ${EnvironmentName}:PublicSubnetOne
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Sub ${EnvironmentName}:PublicSubnetTwo
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetOne
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetTwo
  PrivateDbSubnetGroup:
    Description: Private database subnet group
    Value: !Ref 'DbSubnetGroup'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateDbSubnetGroup
  LocalNamespace:
    Description: Private DNS for service discovery
    Value: !GetAtt LocalNamespace.Id
    Export:
      Name: !Sub ${EnvironmentName}:LocalNamespace

  
