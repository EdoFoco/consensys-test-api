image: node:latest

variables:
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  ECR_REGISTRY: $ECR_REGISTRY
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  APP_NAME: $APP_NAME

stages:
  - build
  - test
  - deploy

build:
  stage: build
  script:
    - npm install
    - npm run build
  cache:
    paths:
      - node_modules/
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - node_modules/
      - dist/
      - infrastructure/

test:
  stage: test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  dependencies:
    - build
  script:
    - npm run test:cover
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

deploy:
  stage: deploy
  image:
    name: docker:latest
  services:
    - docker:19-dind
  dependencies:
    - build
  before_script:
    - apk add --no-cache curl jq python3 py3-pip gettext
    - pip install awscli
    - echo $ECR_REGISTRY
    - echo $APP_NAME
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - docker login -u AWS -p $(aws ecr get-login-password --region eu-west-1) $ECR_REGISTRY
    - aws --version
    - docker info
    - docker --version
  script:
    - docker build -t $APP_NAME .
    - docker tag $APP_NAME:latest $ECR_REGISTRY/$APP_NAME:$CI_PIPELINE_IID
    - docker push $ECR_REGISTRY/$APP_NAME:$CI_PIPELINE_IID
    - envsubst < infrastructure/aws/5_task-definition.json > task-definition.staging.json
    - cat task-definition.staging.json
    - aws ecs register-task-definition --cli-input-json task-definition.staging.json --region $AWS_DEFAULT_REGION
